---
- name: install galera db packages
  yum: pkg=mariadb-galera-server state=present
  when: use_galera is defined and use_galera
  tags: mysql

- name: install standalone db packages
  yum: pkg=mariadb-server state=present
  when: use_galera is not defined or not use_galera
  tags: mysql

- name: deploy clustercheck
  template: src=clustercheck.j2 dest=/etc/sysconfig/clustercheck mode=0644 owner=root group=root
  when: use_galera is defined and use_galera
  tags: mysql

- name: deploy galera.cnf on the first controller
  template: src=galera.cnf.first.j2 dest=/etc/my.cnf.d/galera.cnf mode=0644 owner=root group=root
  when: use_galera is defined and use_galera and inventory_hostname == first_controller
  notify: restart mariadb
  tags: mysql

- name: deploy galera.cnf on other controllers
  template: src=galera.cnf.other.j2 dest=/etc/my.cnf.d/galera.cnf mode=0644 owner=root group=root
  when: use_galera is defined and use_galera and inventory_hostname != first_controller
  notify: restart mariadb
  tags: mysql

- name: start mariadb service
  service: name=mariadb enabled=yes state=started
  tags: mysql

#- name: disable mariadb service
#  service: name=mariadb enabled=no
#  tags: mysql

#- name: create galera pcs resources
#  command: pcs resource create galera systemd:mariadb op monitor start-delay=10s op start timeout=120s clone interleave=true ordered=true
#  pcs_resource: command=create resource_id=galera type=systemd:mariadb
#  args:
#    options:
#    operations:
#      - action: monitor
#        options:
#          start-delay: 10s
#
#      - action: start
#        options:
#          timeout: 120s
#      
#  when: use_galera and inventory_hostname == first_controller
#  tags: mysql

- name: create clustercheck database user
  mysql_user: name={{ clustercheck_db_user }} host=localhost password={{ clustercheck_db_pass }} state=present
  when: use_galera is defined and use_galera and inventory_hostname == first_controller
  tags: mysql

- name: create databases
  mysql_db: name={{ item }} state=present
  with_items:
    - keystone
    - glance
    - cinder
    - nova
    - ovs_neutron
    - heat
  when: inventory_hostname == first_controller
  tags: mysql

- name: create keystone database users
  mysql_user: name={{ item.name }} host=% password={{ item.password }} priv={{ item.db }}.*:{{ item.priv }} state=present
  with_items:
    - { name: root, password: "{{ db_root_password }}", db: '*', priv: 'ALL,GRANT' }
    - { name: keystone, password: "{{ keystone_db_pass }}", db: keystone, priv: ALL }
    - { name: glance, password: "{{ glance_db_pass }}", db: glance, priv: ALL }
    - { name: cinder, password: "{{ cinder_db_pass }}", db: cinder, priv: ALL }
    - { name: nova, password: "{{ nova_db_pass }}", db: nova, priv: ALL }
    - { name: neutron, password: "{{ neutron_db_pass }}", db: ovs_neutron, priv: ALL }
    - { name: heat, password: "{{ heat_db_pass }}", db: heat, priv: ALL }
  when: inventory_hostname == first_controller
  notify: flush db hosts
  tags: mysql
