---
- name: delete pacemaker resource for galera
  command: pcs resource delete galera
  run_once: true
  tags:
      - mysql-cleanup

- name: stop local mariadb server
  service: name=mariadb state=stopped
  tags:
      - mysql-cleanup

- name: remove database and related packages
  yum: pkg={{ item }} state=absent
  with_items:
    - mariadb-galera-server
    - MySQL-python
    - xinetd
    - nfs-utils
  tags: 
    - mysql-cleanup

- name: remove mysql directory
  file: force=yes path=/var/lib/mysql/ recurse=yes state=directory
  tags: 
    - mysql-cleanup

- name: install database and related packages
  yum: pkg={{ item }} state=present
  with_items:
    - mariadb-galera-server
    - MySQL-python
    - xinetd
    - nfs-utils
  tags: mysql

- name: deploy clustercheck
  template: src=clustercheck.j2 dest=/etc/sysconfig/clustercheck mode=0644 owner=root group=root
  tags: mysql

- name: deploy mariadb server config file with increased number of max_connections
  copy: src=server.cnf dest=/etc/my.cnf.d/server.cnf mode=0644 owner=root group=root
  tags: mysql

- name: deploy galera.cnf on controllers
  template: src=galera.cnf.j2 dest=/etc/my.cnf.d/galera.cnf mode=0644 owner=root group=root
  tags: mysql

- name: deploy galera-monitor config file
  copy: src=galera-monitor dest=/etc/xinetd.d/galera-monitor mode=0600 owner=root group=root
  tags: mysql

- name: enable xinetd service
  service: name=xinetd enabled=yes state=started
  tags: mysql

#- name: start local mariadb server
#  service: name=mariadb state=started
#  when: inventory_hostname == groups.controller[0]
#  tags:
#      - mysql

- name: temporarily configure wsrep cluster address
  lineinfile: "dest=/etc/my.cnf.d/galera.cnf insertafter=EOF state=present line=wsrep_cluster_address=gcomm://"
#  when: inventory_hostname == groups.controller[0]
  tags:
      - mysql

- name: start local mariadb server
  service: name=mariadb state=restarted
#  when: inventory_hostname == groups.controller[0]
  tags:
      - mysql

- name: pause to let database start
  pause: seconds=5
  tags:
      - mysql

- name: create clustercheck database user
  mysql_user: name={{ clustercheck_db_user }} host=localhost password={{ clustercheck_db_pass }} state=present
#  when: inventory_hostname == groups.controller[0]
  run_once: true
  tags:
      - mysql

- name: remove temporary wsrep cluster address
  lineinfile: "dest=/etc/my.cnf.d/galera.cnf insertafter=EOF state=absent line=wsrep_cluster_address=gcomm://"
#  when: inventory_hostname == groups.controller[0]
  tags:
      - mysql

- name: disable mariadb service
  service: name=mariadb enabled=no state=stopped
  tags: mysql

- name: create pacemaker resource for galera
  pcs_resource: command=create name=galera type=galera master=yes
  args:
    options:
      enable_creation: true
      wsrep_cluster_address: "{{ wsrep_cluster_address }}"
    meta:
      master-max: 3
      ordered: true
    operations:
      - action: promote
        options:
          timeout: 300s
          on-fail: block
  run_once: true
  tags: mysql

- name: pause to let galera start and form the cluster
  pause: seconds=60
  tags: mysql

- name: create databases
  mysql_db: name={{ item }} state=present
  with_items:
    - keystone
    - glance
    - cinder
    - nova
    - neutron
    - heat
  run_once: true
  tags: mysql

- name: create keystone database users
  mysql_user: name={{ item.name }} host=% password={{ item.password }} priv={{ item.db }}.*:{{ item.priv }} state=present
  with_items:
    - { name: root, password: "{{ db_root_password }}", db: '*', priv: 'ALL,GRANT' }
    - { name: keystone, password: "{{ keystone_db_pass }}", db: keystone, priv: ALL }
    - { name: glance, password: "{{ glance_db_pass }}", db: glance, priv: ALL }
    - { name: cinder, password: "{{ cinder_db_pass }}", db: cinder, priv: ALL }
    - { name: nova, password: "{{ nova_db_pass }}", db: nova, priv: ALL }
    - { name: neutron, password: "{{ neutron_db_pass }}", db: neutron, priv: ALL }
    - { name: heat, password: "{{ heat_db_pass }}", db: heat, priv: ALL }
  run_once: true
  notify: flush db hosts
  tags: mysql
